# -*- coding: utf-8 -*-
"""TextClassificationEnsemble.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lBrgb-PNv2YLrrpceY9Tmy9elJJl97Ie
"""

import nltk
import random
from nltk.corpus import movie_reviews
import pickle
from nltk.classify.scikitlearn import SklearnClassifier
from sklearn.naive_bayes import MultinomialNB,GaussianNB,BernoulliNB
from sklearn.linear_model import LogisticRegression,SGDClassifier
from sklearn.svm import SVC,LinearSVC,NuSVC
from nltk.classify import ClassifierI
from statistics import mode

class VoteClassifier(ClassifierI):
  def __init__(self,*classifiers):
    self._classifiers=classifiers
  def classify(self,features):
    votes=[]
    for c in self._classifiers:
      v=c.classify(features)
      votes.append(v)
    return mode(votes)  
  def confidence(self,features):
    votes=[]
    for c in self._classifiers:
      v=c.classify(features)
      votes.append(v)
    choice_votes=votes.count(mode(votes))
    conf=choice_votes/len(votes)
    return conf

nltk.download("movie_reviews")

documents=[(list(movie_reviews.words(fileid)),category)
            for category in movie_reviews.categories()
            for fileid in movie_reviews.fileids(category)]

random.shuffle(documents)

all_words=[]
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words=nltk.FreqDist(all_words)
word_features=list(all_words.keys())[:3000]

def find_features(document):
  words=set(document)
  features={}
  for w in word_features:
    features[w]=( w in words)
  return features

featuresets=[(find_features(rev),category) for (rev,category) in documents]

training_set=featuresets[:1900]
testing_set=featuresets[1900:]

##classifier=nltk.NaiveBayesClassifier.train(training_set)
classifier_f=open("naivebayes.pickle","rb")
classifier=pickle.load(classifier_f)
classifier_f.close()
print("NaiveBayes Algo accuracy:",(nltk.classify.accuracy(classifier,testing_set))*100)
classifier.show_most_informative_features(15)

save_classifier=open("naivebayes.pickle","wb")
pickle.dump(classifier,save_classifier)
save_classifier.close()

MNB_classifier=SklearnClassifier((MultinomialNB()))
MNB_classifier.train(training_set)
print("MNB_classifier accuracy",(nltk.classify.accuracy(MNB_classifier,testing_set))*100)

GNB_classifier=SklearnClassifier((GaussianNB()))
GNB_classifier.train(training_set)
print("GNB_classifier accuracy",(nltk.classify.accuracy(GNB_classifier,testing_set))*100)

BNB_classifier=SklearnClassifier((BernoulliNB()))
BNB_classifier.train(training_set)
print("BNB_classifier accuracy",(nltk.classify.accuracy(BNB_classifier,testing_set))*100)

LogisticRegressionClassifier=SklearnClassifier((LogisticRegression()))
LogisticRegressionClassifier.train(training_set)
print("LR_classifier accuracy",(nltk.classify.accuracy(LogisticRegressionClassifier,testing_set))*100)

SGD_classifier=SklearnClassifier((SGDClassifier()))
SGD_classifier.train(training_set)
print("SGD_classifier accuracy",(nltk.classify.accuracy(SGD_classifier,testing_set))*100)

SVC_classifier=SklearnClassifier((SVC()))
SVC_classifier.train(training_set)
print("SVC_classifier accuracy",(nltk.classify.accuracy(SVC_classifier,testing_set))*100)

LinearSVC_classifier=SklearnClassifier((LinearSVC()))
LinearSVC_classifier.train(training_set)
print("LSVC_classifier accuracy",(nltk.classify.accuracy(LinearSVC_classifier,testing_set))*100)

NU_classifier=SklearnClassifier((NuSVC()))
NU_classifier.train(training_set)
print("NU_classifier accuracy",(nltk.classify.accuracy(NU_classifier,testing_set))*100)

save_classifier1=open("SVC.pickle","wb")
pickle.dump(SVC_classifier,save_classifier1)
save_classifier1.close()

voted_classifier=VoteClassifier(classifier,
                                MNB_classifier,
                                BNB_classifier,
                                SGD_classifier,
                                LinearSVC_classifier,
                                LogisticRegressionClassifier,
                                NU_classifier)

print("Votd classifier",(nltk.classify.accuracy(voted_classifier,testing_set))*100)

print("Classification:", voted_classifier.classify(testing_set[0][0]),"Confidence",voted_classifier.confidence(testing_set[0][0]))

